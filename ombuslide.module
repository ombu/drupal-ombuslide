<?php
/**
 * @file
 * Code for the Ombuslide feature.
 */

include_once('ombuslide.features.inc');


/**
 * Implements hook_bean_types_api_info().
 */
function ombuslide_bean_types_api_info() {
  return array(
    'api' => bean_current_version(),
  );
}

/**
 * Implements hook_bean_types().
 */
function ombuslide_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'ombuslide');

  $plugins['ombuslide'] = array(
    'name' => 'ombuslide',
    'label' => t('Slideshow'),
    'handler' => array(
      'class' => 'OmbuslideBean',
      'parent' => 'BeanPlugin',
      'path' => $plugin_path . '/includes',
      'file' => 'OmbuslideBean.php',
    ),
    'editable' => TRUE,
  );
  return $plugins;
}

/**
 * Implements hook_theme()
 */
function ombuslide_theme($existing, $type, $theme, $path) {
  return array(
    'ombuslide_default' => array(
      'variables' => array(
        'items' => NULL,
        'type' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_view_alter().
 */
function ombuslide_block_view_alter(&$data, $block) {
  // Add "add" link to block contextual links.
  if ($block->module == 'bean' && isset($data['content']) && is_array($data['content']) && array_key_exists('bean', $data['content'])) {
    foreach ($data['content']['bean'] as $id => $bean) {
      if (!empty($bean['#bundle']) && $bean['#bundle'] == 'ombuslide') {
        $field = field_info_field('field_slide');
        $path = field_collection_field_get_path($field);
        $data['content']['#contextual_links']['field_collection'] = array($path . '/add', array('bean', $id));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ombuslide_form_bean_form_alter(&$form, $form_state) {
  // provide a simpler form for ordering and editing slides.
  if ($form['#bundle'] == 'ombuslide') {
    $path = drupal_get_path('module', 'ombuslide');
    drupal_add_js($path . '/ombuslide.admin.js');
    drupal_add_css($path . '/ombuslide.admin.css');
    $form['#submit'][] = 'ombuslide_form_bean_form_submit';
  }
}

/**
 * Implements hook_bean_styles().
 */
function ombuslide_bean_styles() {
  return array(
    'slideshow' => array(
      'label'          => 'Slideshow',
      'class'          => 'SlideshowBeanStyle',
      'bean_types'     => array(
        'ombuslide',
      ),
    )
  );
}

/**
 * Implements hook_bean_style_options_alter().
 */
function ombuslide_bean_style_options_alter(&$options, $context) {
  // Remove default option for slideshows, since we always want a slideshow
  // style displayed.
  if ($context['bundle'] == 'ombuslide') {
    unset($options['']);
  }
}

/**
 * Submit callback for ombuslide form to redirect.
 */
function ombuslide_form_bean_form_submit($form, &$form_state) {
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    $form_state['redirect'] = $destination['destination'];
  }
}

/**
 * Theme callback.
 *
 * Themes a field collection as a ombuslide.
 */
function theme_ombuslide_default($variables) {
  $items = $variables['items'];

  $output = '';

  // If there are no slides, return empty string.
  if (!$items) {
    return $output;
  }

  // Otherwise, build up the slide items and their associated pager links.
  $items = array();
  $pager = '';
  $num = 0;

  foreach ($variables['items'] as $item) {

    // Generate a unique ID for this slide.
    $id = drupal_html_id('slide');

    // Add a pager link for this slide.
    $pager .= '<li><a href="#' . $id . '"><span><em>' . ++$num . '</em></span></a></li>';

    // Set the ID, render the slide, and push it onto our list item array.
    $item['data']['#attributes']['id'] = $id;
    $items[] = drupal_render($item['data']);
  }

  // Generate the parent list element, the corresponding pager list, and
  // previous/next links.
  $id = drupal_html_id('ombuslide-' . time());
  $slides = theme('item_list', array('items' => $items, 'attributes' => array('class' => array('slides'))));
  $pager = '<ul class="pager">' . $pager . '</ul>';
  $prevnext = '<ul class="prevnext"><li class="prev"><a href="#"><span>&lsaquo;</span></a></li><li class="next"><a href="#"><span>&rsaquo;</span></a></li></ul>';

  $attributes = array(
    'id' => $id,
    'class' => array(
      'ombuslide',
      'ombuslide-slideshow',
      'ombuslide-' . $variables['type'],
    ),
    'data-slide-count' => $num,
  );

  // Default values. These are overriden by those from the formatter settings
  // form.  See available options at http://jquery.malsup.com/cycle2/api/
  $opts = array(
    'timeout' => 6000,
    'slides' => '> li',
    'autoHeight' => 'calc',
    'prev' => '#' . $id . ' .prevnext > .prev > a',
    'next' => '#' . $id . ' .prevnext > .next > a',
    'pager' => '#' . $id . ' .pager',
    'pagerTemplate' => '',
    'speed' => 600,
    'manualSpeed' => 600,
    'fx' => 'scrollHorz',
    'hideNonActive' => TRUE,
  );
  $attributes['data-ombuslide-settings'] = json_encode($opts);

  $output = '<div ' . drupal_attributes($attributes) . '>' . $slides . $prevnext . $pager . '</div>';

  // Add js.
  $path = drupal_get_path('module', 'ombuslide') . '/styles/default';
  drupal_add_js($path . '/js/jquery.cycle2.js');
  drupal_add_js($path . '/js/ombuslide.js');

  drupal_add_css($path . '/css/ombuslide.default.css');

  return $output;
}

/**
 * Helper function to create a slide (which is a field_collection).
 */
function ombuslide_create_slide($bean, $image_path = NULL, $title = NULL, $description = NULL, $link = NULL) {

  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_slide'));
  $field_collection_item->setHostEntity('bean', $bean);

  if ($image_path) {
    $directory = file_default_scheme() . '://slide';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
    $file = file_save_data(file_get_contents($image_path), $directory . '/slide.jpg');
    $field_collection_item->field_image[LANGUAGE_NONE][] = (array)$file;
  }
  if ($title ) {
    $field_collection_item->field_slide_title[LANGUAGE_NONE][]['value'] = $title;
  }
  if ($description) {
    $field_collection_item->field_slide_text[LANGUAGE_NONE][] = array(
      'value' => $description,
      'format' => 'default',
    );
  }
  if ($link) {
    $field_collection_item->field_link[LANGUAGE_NONE][] = $link;
  }
  $field_collection_item->save();

  return $field_collection_item;
}
